library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;}')
add
cppFunction('bool all_equal(NumericVector x) {
double precision = as<double>(y);
for (int i = 0, size = var.size(); i < size; ++i) {
if (var[i] - var[0] > precision || var[0] - var[i] > precision)
return false;
}
return true;
}')
cppFunction('bool all_equal(NumericVector x) {
double precision = as<double>(y);
for (int i = 0, size = x.size(); i < size; ++i) {
if (x[i] - x[0] > precision || x[0] - x[i] > precision)
return false;
}
return true;
}')
cppFunction('bool all_equal(NumericVector x, numeric y) {
double precision = as<double>(y);
for (int i = 0, size = x.size(); i < size; ++i) {
if (x[i] - x[0] > precision || x[0] - x[i] > precision)
return false;
}
return true;
}')
cppFunction('bool all_equal(NumericVector x, double y) {
double precision = as<double>(y);
for (int i = 0, size = x.size(); i < size; ++i) {
if (x[i] - x[0] > precision || x[0] - x[i] > precision)
return false;
}
return true;
}')
cppFunction('bool all_equal(NumericVector x, double y) {
for (int i = 0, size = x.size(); i < size; ++i) {
if (x[i] - x[0] > y || x[0] - x[i] > y)
return false;
}
return true;
}')
all_equal(c(1, 1, 1, 1, 1), 0.0001)
?Rcpp::wrap
library(data.table)
x <- data.table(github_user = rep('nicholaelaw', 4L), github_email = c('nicholaelaw-MBP', 'LIFAN-RM', 'aliyun', 'nicholaelaw-PC'))
x
fwrite(x, file = './github_users.csv')
library(assertthat)
?is.readable
devtools::document()
devtools::document()\
devtools::document()
library(LFUtility)
getGHUserList('./github_users.csv')
getGHUserList('../LFTestFacility/github_users.csv')
x ,- getGHUserList('../LFTestFacility/github_users.csv')
x <- getGHUserList('../LFTestFacility/github_users.csv')
x
?file.path
?add_github_user
file.path('./data')
file.path('./data', 'user.csv')
devtools::document()
Rcpp::compileAttributes()
devtools::document()
vignette("Rcpp-package")
Rcpp::compileAttributes()
Rcpp::compileAttributes(pkgdir = '.')
cat(system.file( 'lib', 'Rcpp.h', package = 'Rcpp' ))
Rcpp::Rcpp.package.skeleton()
Rcpp::compileAttributes()
devtools::document()
Rcpp::Rcpp.package.skeleton()
Rcpp::compileAttributes()
devtools::document()
file.path('~/.Rprofile')
source(file.path('~/.Rprofile'))
getOption('reops')
getOption('repos')
getOption('java.parameters')
devtools::setup_rtools()
Sys.getenv('PATH')
devtools::setup_rtools()
Sys.getenv('PATH')
devtools::setup_rtools()
system('g++ -v')
devtools::document()
library(inline)
library(Rcpp)
fast_equal = cxxfunction(signature(x = 'numeric', y = 'numeric'), '
NumericVector var(x);
double precision = as<double>(y);
for (int i = 0, size = var.size(); i < size; ++i) {
if (var[i] - var[0] > precision || var[0] - var[i] > precision)
return Rcpp::wrap(false);
}
return Rcpp::wrap(true);
', plugin = 'Rcpp')
install.packages(c("callr", "lubridate"))
devtools::document()
update.packages('devtools')
devtools::document()
devtools::find_rtools()
Sys.getenv('BINPREF')
Sys.getenv('PATH')
devtools::document()
devtools::document()\
devtools::document()
paste(normalizePath('c:/Rtools/bin'), Sys.getenv('PATH'), sep = ';')
devtools::document(\)
devtools::document()
library(LFUtility)
Rcpp::compileAttributes()
devtools::document()
library(LFUtility)
x <- c(rep(121.2, 100000), rep(121.2, 100000))
elementsAllEqual(x, 0.0001)
x <- c(rep(121.2, 100000), 121.1999, rep(121.2, 100000))
elementsAllEqual(x, 0.0001)
elementsAllEqual(x, 0.001)
elementsAllEqual(x, 0.0001)
elementsAllEqual(x)
Rcpp::compileAttributes()
library(LFUtility)
elementsAllEqual(x)
elementsAllEqual(x, 0.0001)
elementsAllEqual(x, 0.001)
devtools::document()
?elementsAllEqual
unserialize()
unserialize('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAJbW91eWlmZW5n')
unserialize(jsonlite::base64_dec(input = "WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAJbW91eWlmZW5n"))
de<-function(x) {return(unserialize(jsonlite::base64_dec(input = x)))}
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAJbW91eWlmZW5n')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAJbHkzMjVlZTc3')
de('WAoAAAACAAMDAwACAwAAAAAQAAAAAQAEAAkAAAAdejZhczBubDJuNWJrOHA0ZDJwaWV0cm5j\nN2Fxd2M=')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAHbGZyejAxNg==')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAGMjMxMzY2')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAFbGlmYW4=')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAACNDM=')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAgOTFjNTgzMzY2MWZhNjNkNmM3OTY3YzZk\nYzY1ODEyZTU=')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAEdGVzdA==')
de*('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAA2ZjAzMmYyN2VlMThmOWRlNjdhM2JiOWMx\nNmVhZTU3YjMmaW1laXM9MzUyNTQ0MDcxNzgxMzIz')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAA2ZjAzMmYyN2VlMThmOWRlNjdhM2JiOWMx\nNmVhZTU3YjMmaW1laXM9MzUyNTQ0MDcxNzgxMzIz')
de('WAoAAAACAAMEAwACAwAAAAAQAAAAAQAEAAkAAAAFbGlmYW4=')
de('WAoAAAACAAMEAwACAwAAAAAQAAAAAQAEAAkAAAAGMTIzNDU2')
de('WAoAAAACAAMEAwACAwAAAAAQAAAAAQAEAAkAAAAKbGlmYW56dWxpbg==')
de('WAoAAAACAAMDAgACAwAAAAAQAAAAAQAEAAkAAAAEdGVzdA==')
Rcpp::compileAttributes()
devtools::load_code()
devtools::document()
library(LFUtility)
obfus('TEST')
obfus(c('TEST', 'hello world'))
library(LFUtility)
obfus(c('TEST', 'hello world'))
x <- obfus(c('TEST', 'hello world'))
obfus(x)
obfus('中文')
obfus(.Last.value)
x <- obfus(c('TEST', 'hello world'))
obfus(x)
x
library(LFUtility)
flipStr('hello world')
library(magrittr)
flipStr('hello world') %>% flipstr
flipStr('hello world') %>% flipStr
library(jsonlite)
fromJSON('./data/text.json')
x <- fromJSON('./data/text.json')
x$encrypted <- flipStr(x$text)
x
flipStr(x)
flipStr(x$text)
x
library(LFUtility)
x
flipStr(x$text)
x
x <- fromJSON('./data/text.json')
x
x$enc <- flipStr(x$text)
x
toJSON(x)
base64_enc(x)
base64_enc(x$enc)
write_json(base64_enc(x), './data/text.enc.json')
?write_json
write_json(base64_enc(x$enc), './data/text.enc.json')
base64_enc(x$enc) %>% base64_dec() %>% flipStr()
base64_enc(x$enc) %>% base64_dec()
base64_enc(x$enc) %>% base64_dec() %>% as.character()
base64_enc(x$enc) %>% base64_dec() %>% rawToChar()
base64_enc(x$enc) %>% base64_dec() %>% rawToChar() %>% flipStr()
'简体中文Simplified Chinese' %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% flipStr()
enc2utf8('简体中文Simplified Chinese') %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% flipStr()
enc2utf8('简体中文Simplified Chinese') %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% flipStr() %>% enc2native()
enc2utf8('简体中文Simplified Chinese') %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% flipStr() %>% enc2utf8()
enc2utf8('简体中文Simplified Chinese') %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% enc2utf8() %>% flipStr()
enc2utf8('简体中文Simplified Chinese')
enc2utf8('简体中文Simplified Chinese') %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% enc2utf8() %>% flipStr()
enc2utf8('简体中文Simplified Chinese') %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% flipStr()
enc2utf8('简体中文Simplified Chinese') %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% flipStr() %>% `Encoding<-`('UTF-8')
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% base64_enc() %>% base64_dec() %>% rawToChar() %>% flipStr() %>% `Encoding<-`('UTF-8')
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr()
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% base64_enc()
?base64_enc
?serialize
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% serialize(version = 2) %>% base64_enc()
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% serialize(connection = NULL, version = 2) %>% base64_enc()
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% serialize(connection = NULL, version = 2) %>% base64_enc() %>% base64_dec()
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% serialize(connection = NULL, version = 2) %>% base64_enc() %>% base64_dec() %>% rawToChar()
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% serialize(connection = NULL, version = 2) %>% base64_enc() %>% base64_dec() %>% unserialize %>% rawToChar()
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% serialize(connection = NULL, version = 2) %>% base64_enc() %>% base64_dec() %>% unserialize
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% serialize(connection = NULL, version = 2) %>% base64_enc() %>% base64_dec() %>% unserialize() %>% flipStr()
enc2utf8(c('简体中文Simplified Chinese', 'Hello World!')) %>% flipStr() %>% serialize(connection = NULL, version = 2) %>% base64_enc() %>% base64_dec() %>% unserialize() %>% flipStr() %>% `Encoding<-`('UTF-8')
library(LFUtility)
x <- c('简体中文Simplified Chinese', 'Hello World!')
encrypt(x)
decrypt(x)
jsonlite::base64_dec(STR)
recover()
jsonlite::base64_dec(STR)
encrypt(x) %>% decrypt()
?encrypt
encrypt(x) %>% decrypt()
library(LFUtility)
encrypt(x) %>% decrypt()
x <- fromJSON('./data/text.json')
encrypt(x)
encrypt(x$text)
encrypt(x$text) %>% decrypt()
